// Generated by CoffeeScript 1.7.1
(function() {
  var app, appControllers, fs_path, gui, msTranslator, util, wrench;

  fs_path = require('path');

  wrench = require('wrench');

  util = require('util');

  gui = require('nw.gui');

  msTranslator = require('mstranslator');

  appControllers = angular.module('appControllers', []);

  app = angular.module('app', ['ngRoute', 'ngResource', 'appFilters', 'appControllers']);

  app.config([
    '$routeProvider', function($routeProvider) {
      return $routeProvider.when('/main', {
        templateUrl: 'templates/main.html',
        controller: 'mainCtrl'
      }).when('/plurial', {
        templateUrl: 'templates/plurial.html',
        controller: 'plurialCtrl'
      }).when('/config', {
        templateUrl: 'templates/config.html',
        controller: 'configCtrl'
      }).otherwise({
        redirectTo: '/main'
      });
    }
  ]);

  angular.module('appFilters', []).filter('translateFilter', function() {
    return function(item, type) {
      var obj;
      obj = {};
      angular.forEach(item, function(value, key) {
        var bool;
        bool = false;
        switch (type) {
          case "no_translate":
            if (value.text === "") {
              bool = true;
            }
            break;
          case "translate":
            if (value.text !== "") {
              bool = true;
            }
            break;
          default:
            bool = true;
        }
        if (bool) {
          return obj[key] = value;
        }
      });
      return obj;
    };
  }).filter('translateSearch', function() {
    return function(item, params) {
      var obj, reg, text;
      text = params.search;
      obj = {};
      if (!text) {
        return item;
      }
      text = text.replace(/[\(\)\|\[\]\+\?\*\\]/, "");
      reg = new RegExp(text, "g");
      angular.forEach(item, function(value, key) {
        var bool;
        bool = false;
        switch (params.type) {
          case "id":
            if (reg.test(key)) {
              bool = true;
            }
            break;
          case "from":
            if (reg.test(value.init)) {
              bool = true;
            }
            break;
          case "to":
            if (reg.test(value.text)) {
              bool = true;
            }
            break;
          default:
            bool = reg.test(value.text) || reg.test(value.init);
        }
        if (bool) {
          return obj[key] = value;
        }
      });
      return obj;
    };
  });

  app.factory('file', function($rootScope) {
    var CONFIG_NAME, service;
    CONFIG_NAME = "config.lang";
    service = {};
    service.langs = {};
    service.config = {};
    service.extension = {
      ".php": /\Wt\(("|')([a-zA-Z0-9_-]+)("|')/g,
      ".js": /("|')([a-zA-Z0-9_-]+)("|')\.t\(/g
    };
    service.modified = {};
    service.isModified = function() {
      var bool, id, _ref;
      _ref = this.modified;
      for (id in _ref) {
        bool = _ref[id];
        if (bool) {
          return true;
        }
      }
      return false;
    };
    service.onModified = function(id) {
      if (this.modified[id] == null) {
        this.modified[id] = 0;
      }
      this.modified[id]++;
      return this.refreshInfo();
    };
    service.extract = function(json) {
      this.data = json[0];
      return this.head = json[1];
    };
    service.setPath = function(path) {
      return this.path = path;
    };
    service.getKeyLang = function(lang) {
      return this.langs[lang][0];
    };
    service.analysis = function(path, progress, onfinish) {
      var files, finish, i, read;
      files = wrench.readdirSyncRecursive(path);
      i = 0;
      finish = (function(_this) {
        return function() {
          if (onfinish) {
            onfinish();
          }
          return _this.refreshCurrent();
        };
      })(this);
      read = (function(_this) {
        return function() {
          var data, ext, file, find, id, m, match, percent, _i, _len;
          file = files[i];
          ext = fs_path.extname(file);
          if (_this.extension[ext]) {
            data = fs.readFileSync("" + path + "/" + file, 'utf8');
            match = data.match(_this.extension[ext]);
            if (match) {
              for (_i = 0, _len = match.length; _i < _len; _i++) {
                m = match[_i];
                find = null;
                find = _this.extension[ext].exec(m);
                id = find[2];
                _this.extension[ext].lastIndex = 0;
                if (!_this.idExist(_this.init, id)) {
                  _this.add(id, "");
                }
              }
            }
          }
          i++;
          if (files.length === i) {
            return finish();
          } else {
            percent = Math.floor((i * 100) / files.length);
            if (progress) {
              progress(percent, "" + path + "/" + file);
            }
            return setTimeout(read, 1);
          }
        };
      })(this);
      return read();
    };
    service.add = function(id, val) {
      var key, value, _ref, _results;
      _ref = this.langs;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        this.langs[key][0][id] = key === this.text ? val : "";
        _results.push(this.onModified(key));
      }
      return _results;
    };
    service.remove = function(id) {
      var key, value, _ref, _results;
      _ref = this.langs;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        delete this.langs[key][0][id];
        _results.push(this.onModified(key));
      }
      return _results;
    };
    service.change = function(id, val) {
      this.langs[this.text][0][id] = val;
      this.onModified(this.text);
      return this.refreshCurrent();
    };
    service["new"] = function(id, name) {
      var obj, val, _id, _ref;
      obj = {};
      if (this.langs[this.init]) {
        _ref = this.langs[this.init][0];
        for (_id in _ref) {
          val = _ref[_id];
          obj[_id] = "";
        }
      }
      this.langs[id] = [
        obj, {
          name: name
        }
      ];
      this.text = id;
      this.save();
      return this.refresh();
    };
    service.save = function(path, id) {
      if (id == null) {
        id = this.text;
      }
      path = path ? path : "" + this.path + "/" + id;
      fs.writeFileSync(path, JSON.stringify(this.langs[id], {
        encoding: "utf8"
      }));
      this.modified[id] = 0;
      return this.refreshInfo();
    };
    service.saveConfig = function() {
      var path;
      path = "" + this.path + "/" + CONFIG_NAME;
      this.config.date_modified = new Date().getTime();
      return fs.writeFileSync(path, JSON.stringify(this.config, {
        encoding: "utf8"
      }));
    };
    service.openConfig = function() {
      var f, path;
      path = "" + this.path + "/" + CONFIG_NAME;
      if (fs.existsSync(path)) {
        f = fs.readFileSync(path, 'utf8');
        return this.setConfig(angular.fromJson(f));
      }
    };
    service.getConfig = function() {
      return this.config;
    };
    service.setConfig = function(config) {
      return this.config = config;
    };
    service.allSave = function(path) {
      var id, val, _ref;
      _ref = this.langs;
      for (id in _ref) {
        val = _ref[id];
        if (this.modified[id] > 0) {
          this.save(path, id);
        }
      }
      return this.saveConfig();
    };
    service.getCurrentLang = function(init, _text) {
      var cond, id, lang_init, lang_text, text, value, _ref;
      if (init == null) {
        init = this.init;
      }
      if (_text == null) {
        _text = this.text;
      }
      text = {};
      if (init === "id") {
        init = this.init;
      }
      lang_init = this.getKeyLang(init);
      lang_text = this.getKeyLang(_text);
      _ref = this.langs[init][0];
      for (id in _ref) {
        value = _ref[id];
        cond = this.display_id || !lang_init[id];
        text[id] = {
          init: cond ? id : lang_init[id],
          text: lang_text[id],
          display_id: cond,
          id: id
        };
      }
      this.text = _text;
      this.init = init;
      return text;
    };
    service.open = function(path) {
      this.setPath(path);
      return this.refresh();
    };
    service.getName = function(id) {
      return this.langs[id][1].name;
    };
    service.getPlurials = function(id) {
      if (id == null) {
        id = this.text;
      }
      return this.langs[id][1].plurial;
    };
    service.setPlurials = function(key, val, id) {
      if (id == null) {
        id = this.text;
      }
      this.langs[id][1].plurial[key] = val;
      return this.onModified(id);
    };
    service.removePlurial = function(key, id) {
      if (id == null) {
        id = this.text;
      }
      delete this.langs[id][1].plurial[key];
      return this.onModified(id);
    };
    service.idExist = function(lang, id) {
      if (this.langs[lang][0][id]) {
        return true;
      }
      return false;
    };
    service.getLangs = function() {
      var id, langs, val, _ref;
      langs = [];
      _ref = this.langs;
      for (id in _ref) {
        val = _ref[id];
        langs.push({
          name: val[1].name,
          id: id
        });
      }
      return langs;
    };
    service.existFile = function() {
      return this.number !== 0;
    };
    service.initLangs = function() {
      var dir, ext, f, file, files, json, ret, _i, _len;
      dir = this.path;
      files = fs.readdirSync(this.path);
      this.number = 0;
      ret = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        ext = fs_path.extname(file);
        if (ext !== ".json") {
          continue;
        }
        f = fs.readFileSync("" + dir + "/" + file, 'utf8');
        try {
          json = angular.fromJson(f);
        } catch (_error) {
          alert("Impossible d'ouvrir " + dir + "/" + file + ". Le fichier est corrompu.");
          continue;
        }
        this.langs[file] = json;
        if (!this.langs[file][1].plurial) {
          this.langs[file][1].plurial = {};
        }
        this.init = file;
        this.text = file;
        this.number++;
        if (json[1].name) {
          ret.push({
            name: json[1].name,
            id: file
          });
        }
      }
      this.openConfig();
      $rootScope.$broadcast('onloadLangs');
      if (this.number === 0) {
        $('#newFile').modal();
        return false;
      } else {
        return ret;
      }
    };
    service.getSelected = function(list, val) {
      var l, _i, _len;
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        l = list[_i];
        if (l.id === val) {
          return l;
        }
      }
    };
    service.refresh = function() {
      return $rootScope.$broadcast('refreshTable');
    };
    service.refreshCurrent = function() {
      return $rootScope.$broadcast('refreshCurrentTable');
    };
    service.refreshInfo = function() {
      return $rootScope.$broadcast('refreshInfo');
    };
    service.bing = {
      init: function(callback) {
        if (!this.client) {
          this.client = new msTranslator({
            client_id: service.config.bing.client_id,
            client_secret: service.config.bing.client_secret
          });
          return this.client.initialize_token(function(keys) {
            return callback(keys);
          });
        } else {
          return callback();
        }
      },
      translate: function(text, callback) {
        return this.client.translate({
          text: text,
          from: service.init.split(".")[0],
          to: service.text.split(".")[0]
        }, (function(err, data) {
          return callback(data);
        }));
      }
    };
    return service;
  });

  appControllers.controller('mainCtrl', [
    '$scope', 'file', function($scope, $file) {
      var editor, key_markdown;
      editor = new Pen('#markdown-editor');
      key_markdown = "";
      $scope.select_lang = function(val) {
        localStorage["init"] = val.id;
        $file.display_id = val.id === "id" ? true : false;
        return $scope.langs = $file.getCurrentLang(val.id);
      };
      $scope.select_lang_to_translate = function(val) {
        localStorage["to"] = val.id;
        return $scope.langs = $file.getCurrentLang(null, val.id);
      };
      $scope.is_modified = false;
      $scope.$on('refreshInfo', function(event, args) {
        var id, nb, str, _ref;
        str = "";
        _ref = $file.modified;
        for (id in _ref) {
          nb = _ref[id];
          str += "" + ($file.getName(id)) + ", ";
        }
        str = str.replace(/, $/, "");
        $scope.info_modified = "Les langues " + str + " ont été modifiés.";
        $scope.link_save = "Pensez à enregistrer votre travail";
        return $scope.is_modified = $file.isModified();
      });
      $scope.linkSave = function() {
        return $file.allSave();
      };
      $scope.$on('refreshCurrentTable', function(event, args) {
        return $scope.langs = $file.getCurrentLang();
      });
      $scope.$on('refreshTable', function(event, args) {
        var langs;
        langs = $file.initLangs();
        if (langs === false) {
          return;
        }
        $scope.langs = $file.getCurrentLang();
        $scope.all_langs = [
          {
            name: "ID",
            id: "id"
          }
        ].concat(langs);
        $scope.all_langs_real = langs;
        $scope.choice_lang = $file.getSelected($scope.all_langs, $file.init);
        $scope.choice_lang_to_translate = $file.getSelected($scope.all_langs_real, $file.text);
        return $scope.showPanel = $file.existFile();
      });
      $scope.changeText = function(id, val) {
        return $file.change(id, val);
      };
      $scope.edit = function() {};
      $scope.translate = function(key, text) {
        return $file.bing.init(function() {
          return $file.bing.translate(text, function(data) {
            return $file.change(key, data);
          });
        });
      };
      $scope.removeText = function(id) {
        $file.remove(id);
        return $scope.langs = $file.getCurrentLang();
      };
      $scope.addText = function(ev, id, val) {
        if (ev.keyCode === 13) {
          if (id && val) {
            $file.add(id, val);
            return $scope.langs = $file.getCurrentLang();
          } else {
            return alert("Veuillez rentrer un identifiant et une valeur");
          }
        }
      };
      $scope.searchType = "*";
      $scope._searchType = function(type) {
        return $scope.searchType = type;
      };
      $scope.openMarkdown = function(key, val) {
        key_markdown = key;
        $("#markdown-editor").text(val);
        editor.rebuild();
        return $("#markdown").modal();
      };
      $scope.validMarkdown = function() {
        var text;
        $("#markdown").modal('hide');
        text = $("#markdown-editor").html();
        text = text.replace(/<div>/g, "\\n");
        return $file.change(key_markdown, html2markdown(text));
      };
      if (localStorage["path"]) {
        $file.open(localStorage["path"]);
      } else {
        $("#openGroupLang").modal();
      }
      return Mousetrap.bind(['ctrl+s'], function() {
        $file.allSave();
        return false;
      });
    }
  ]);

  appControllers.controller('menuCtrl', [
    '$scope', 'file', function($scope, $file) {
      var win;
      win = gui.Window.get();
      $scope.file = "Fichier";
      $scope.openDirectory = function() {
        var chooser;
        chooser = $('#dirDialog');
        chooser.change(function(evt) {
          var path;
          path = $(this).val();
          localStorage["path"] = path;
          return $file.open(path);
        });
        chooser.trigger('click');
        return false;
      };
      $scope.save = function() {
        $file.allSave();
        return false;
      };
      $scope.newFile = function() {
        $('#newFile').modal();
        return false;
      };
      $scope.analysisProject = function() {
        $('#analysisFile').modal();
        return false;
      };
      Mousetrap.bind(['ctrl+o'], function() {
        $scope.openDirectory();
        return false;
      });
      Mousetrap.bind(['ctrl+n'], function() {
        $scope.newFile();
        return false;
      });
      return win.on("close", function() {
        if ($file.isModified()) {
          if (confirm("Voulez vous enregistrer les modifications et quitter ?")) {
            $file.allSave();
          }
          return this.close(true);
        } else {
          return this.close(true);
        }
      });
    }
  ]);

  appControllers.controller('analysisCtrl', [
    '$scope', 'file', function($scope, $file) {
      var chooser;
      chooser = $('#analysisDialog');
      if (localStorage["analysis_path"]) {
        chooser.attr("nwworkingdir", localStorage["analysis_path"]);
        $scope.pathProject = localStorage["analysis_path"];
      }
      $scope.choiceProject = function() {
        chooser.change(function(evt) {
          var path;
          path = $(this).val();
          localStorage["analysis_path"] = path;
          $scope.pathProject = path;
          return $scope.$apply();
        });
        return chooser.trigger('click');
      };
      $scope.scripts = $file.extension;
      $scope.getLogo = function(ext) {
        return /\.(.+)$/.exec(ext)[1];
      };
      $scope.removeExt = function(ext) {
        return delete $file.extension[ext];
      };
      $scope.addExt = function(ext, regex) {
        if (!/^\./.test(ext)) {
          ext = "." + ext;
        }
        return $file.extension[ext] = regex;
      };
      $scope.changeExt = function(ext, regex) {
        delete $file.extension[ext];
        return $file.extension[ext] = regex;
      };
      return $scope.clickAnalysis = function() {
        $('#analysisFile').modal("hide");
        $('#percentAnalysis').modal();
        return $file.analysis($scope.pathProject, function(percent, path) {
          $scope.percent = percent;
          $scope.path_found = path;
          return $scope.$apply();
        }, function() {
          return $('#percentAnalysis').modal("hide");
        });
      };
    }
  ]);

  appControllers.controller('directoryCtrl', [
    '$scope', 'file', function($scope, $file) {
      var chooser;
      chooser = $('#dirDialog');
      if (localStorage["path"]) {
        $scope.dirPath = localStorage["path"];
      }
      $scope.dirDialog = function() {
        chooser.change(function(evt) {
          var path;
          path = $(this).val();
          localStorage["path"] = path;
          $scope.dirPath = path;
          return $scope.$apply();
        });
        return chooser.trigger('click');
      };
      return $scope.choiceDirectory = function() {
        $file.open($scope.dirPath);
        return $('#openGroupLang').modal('hide');
      };
    }
  ]);

  appControllers.controller('newFileCtrl', [
    '$scope', 'file', function($scope, $file) {
      var icons, lang, langs, m, _i, _len;
      $scope.$on('onloadLangs', function(event, args) {
        return $scope.is_empty = !$file.existFile();
      });
      icons = fs.readdirSync("img/icons");
      langs = [];
      for (_i = 0, _len = icons.length; _i < _len; _i++) {
        lang = icons[_i];
        m = lang.match(/^(.+)\.png$/);
        if (m) {
          langs.push(m[1]);
        }
      }
      $scope.btn_select_lang = "Sélectionnez une langue";
      $scope.langs = langs;
      $scope.selectLang = function(id) {
        $scope.btn_select_lang = id;
        return $scope.langName = id;
      };
      $scope.getLangName = function(id) {
        return id;
      };
      return $scope.createLang = function() {
        $file["new"]("" + $scope.btn_select_lang + ".json", $scope.langName);
        return $('#newFile').modal('hide');
      };
    }
  ]);

  appControllers.controller('plurialCtrl', [
    '$scope', 'file', function($scope, $file) {
      var lang_id;
      lang_id = $file.text;
      $scope.add_key = "";
      $scope.langs = $file.getLangs();
      $scope.select_lang = function(val) {
        return $scope.plurials = $file.getPlurials(val.id);
      };
      $scope.choice_lang = $file.getSelected($scope.langs, lang_id);
      $scope.select_lang({
        id: lang_id
      });
      $scope.removePlurial = function(key) {
        return $file.removePlurial(key, lang_id);
      };
      $scope.addPlurial = function() {
        return $file.setPlurials("p" + $scope.add_key, [$scope.add_plurial, $scope.add_singular, $scope.add_dual], lang_id);
      };
      $scope.savePlurial = function() {
        return $file.allSave();
      };
      return $scope.changePlurial = function(key, val) {
        return $file.setPlurials(key, val, lang_id);
      };
    }
  ]);

  appControllers.controller('configCtrl', [
    '$scope', 'file', function($scope, $file) {
      var lang, langs, _i, _len;
      $scope.config = $file.getConfig();
      $scope.langs = "";
      $scope.path = $file.path;
      langs = $file.getLangs();
      for (_i = 0, _len = langs.length; _i < _len; _i++) {
        lang = langs[_i];
        $scope.langs += "" + lang.name + ", ";
      }
      $scope.langs = $scope.langs.replace(/, $/, "");
      return $scope.saveConfig = function() {
        $file.config = $scope.config;
        return $file.allSave();
      };
    }
  ]);

}).call(this);
